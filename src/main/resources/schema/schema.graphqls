type Query {
    """
    Aggregate root
    """
    securities: [Securities]
    """
    Retrieve all stock alerts
    """
    getAllStockAlerts: [StockAlert]
    """
    Retrieve portfolio and their positions by unique portfolio identifier.
    """
    portfolios(portfolioId: String): [Portfolio]
    #getWatchlist: [Watchlist]
    #getExchangeRates(currency: Currency!) : CurrencyQuote
}

#type Mutation {
#    addStockAlert(alert: StockAlertInput): StockAlert
#}

#type Subscription {
#    getCurrentStockPrice(isin: String!): CurrentStockPrice
#}


type Securities {
    portfolios(portfolioId: String): [Portfolio]
    watchlist: [Watchlist]
    stockAlerts: [StockAlert]
    exchangeRates(currency: Currency!) : CurrencyQuote
}


enum Currency {
    CHF
    CNY
    EUR
    GBP
    USD
}


type  Quotes{
    currency: String!
    quote: Float!
}

type CurrencyQuote {
    baseCurrency: String!
    timeStamp: Int
    quotes: [Quotes]!
}

type CurrentStockPrice{
    isin: String!
    price: Float!
}


interface Stock {
    isin: String!
    symbol: String!
    stockName: String!
    marketRate: Float!
    currency: String
}




type Watchlist implements Stock{
    isin: String!
    symbol: String!
    stockName: String!
    marketRate: Float!
    currency: String
}


type Position implements Stock{
    isin: String!
    symbol: String!
    stockName: String!
    marketRate: Float!
    quantitiy: Int!
    currency: String
}


type Portfolio {
    portfolioName: String!
    currency: String!
    positions: [Position]
    lastUpdated: DateTime
}

type StockAlert{
    id: ID!
    isin: String!
    quantity: Int!
    lowerLimit: Float!
    upperLimit: Float!
}

input StockAlertInput{
    isin: String!
    quantity: Int!
    lowerLimit: Float!
    upperLimit: Float!
}

scalar DateTime
directive @skipcodegen on FIELD_DEFINITION
