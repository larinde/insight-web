type Query {
    """
    Retrieve all stock alerts
    """
    getAllStockAlerts: [StockAlert]
    """
    Retrieve portfolio and their positions by unique portfolio identifier.
    """
    portfolios(portfolioId: PortfolioInput): [Portfolio]
    getWatchlist: [Watchlist]
    getExchangeRates(currency: Currency!) : CurrencyQuote
}

type Mutation {
    addStockAlert(stockAlertInput: StockAlertInput) : Boolean
}

input PortfolioInput {
    portfolioId: String
}

input StockAlertInput{
    symbol: String!
    isin: String!
    exchange: String
    lowerLimit: Float!
    upperLimit: Float!
}




schema {
    query: Query
    mutation: Mutation
#    subscription: Subscription
}

#type Mutation {
#    addStockAlert(alert: StockAlertInput): StockAlert
#}

#type Subscription {
#    getCurrentStockPrice(isin: String!): CurrentStockPrice
#}



enum Currency {
    CHF
    CNY
    EUR
    GBP
    USD
}



type CurrencyQuote {
    baseCurrency: String!
    timeStamp: Int
    quotes: [Quotes]!
}

type  Quotes{
    currency: String!
    quote: Float!
}

type CurrentStockPrice{
    isin: String!
    price: Float!
}


interface Stock {
    isin: String!
    symbol: String!
    stockName: String!
    marketRate: Float!
    currency: String
}




type Watchlist implements Stock{
    isin: String!
    symbol: String!
    stockName: String!
    quantity: Int!
    marketRate: Float!
    currency: String
}

type Portfolio {
    portfolioName: String!
    currency: String!
    positions: [Position]
    lastUpdated: DateTime
}

type Position implements Stock{
    isin: String!
    symbol: String!
    stockName: String!
    marketRate: Float!
    quantity: Int!
    currency: String
}


type StockAlert{
    id: ID!
    isin: String!
    lowerLimit: Float!
    upperLimit: Float!
}


scalar DateTime
scalar Upload
directive @skipcodegen on FIELD_DEFINITION
